///////////////////  Q(\sqrt{5}) /////////////////// 
F:=QuadraticField(5);
prec := 500;
M:=GradedRingOfHMFs(F, prec);
ZF:=Integers(F);
N:= 23*ZF;
H := HeckeCharacterGroup(N, [1,2]);
chi := H.1^11; // (H.1^11); // aka 11 mod 22
M1chi := HMFSpace(M, N, [1,1], chi);
Space := HeckeStabilityCuspBasis(M1chi : prove := false);
f := Space[1];
f := f/Coefficient(f, 1*ZF);


raw_aps := [*\
[*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*1*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*2*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*2*],
        [*2*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*2*],
        [*2*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*2*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*2*],
        [*-1*],
        [*0*],
        [*2*],
        [*-1*],
        [*0*],
        [*2*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*2*],
        [*0*],
        [*-1*],
        [*2*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*2*],
        [*2*],
        [*-1*],
        [*2*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*2*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*2*],
        [*-1*],
        [*2*],
        [*-1*],
        [*0*],
        [*2*],
        [*0*],
        [*2*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*2*],
        [*0*],
        [*2*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*2*],
        [*2*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*2*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*-1*],
        [*2*],
        [*-1*],
        [*2*],
        [*0*],
        [*2*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*2*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*0*],
        [*2*],
        [*2*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*2*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*2*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*2*],
        [*0*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*2*],
        [*2*],
        [*0*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*],
        [*2*],
        [*2*],
        [*0*],
        [*0*],
        [*2*],
        [*2*],
        [*0*],
        [*0*],
        [*2*],
        [*0*],
        [*-1*],
        [*0*],
        [*0*],
        [*-1*],
        [*-1*],
        [*-1*],
        [*0*],
        [*0*],
        [*0*]*];

Nchi := 23;
order := 2;
char_gens := [*5*];
v := [*1*];
// chi(gens[i]) = zeta^v[i]
assert SequenceToList(UnitGenerators(DirichletGroup(Nchi))) eq char_gens;
F := CyclotomicField(order);
chi0 := DirichletCharacterFromValuesOnUnitGenerators(DirichletGroup(Nchi,F),[F|F.1^e:e in v]);
chi0 := MinimalBaseRingCharacter(chi0);

i := 1;
for p in PrimesUpTo(20) do
    a_p := raw_aps[i][1];
    fact := Factorization(p*ZF);
    if #fact gt 1 then // p splits
        assert a_p eq Coefficient(f, fact[1][1]);
        assert a_p eq Coefficient(f, fact[2][1]);
    elif fact[1][2] gt 1 then // p ramifies
        assert a_p eq Coefficient(f, fact[1][1]);
    else // p inert
        assert Coefficient(f, fact[1][1]) eq a_p^2 - 2*p^(1-1)*chi0(p);
    end if;
    i := i+1;
end for;


///////////////////  Q(\sqrt{3}) /////////////////// 

F:=QuadraticField(3);
prec := 500;
M:=GradedRingOfHMFs(F, prec);
ZF:=Integers(F);
N:= 23*ZF;
H := HeckeCharacterGroup(N, [1,2]);
chi := H.1^11*H.2*H.3; 
M1chi := HMFSpace(M, N, [1,1], chi);
Space := HeckeStabilityCuspBasis(M1chi : prove := false);
assert #Space eq 4;

